{
	"ref":[
		   {
		   "contents":[
					   "<h3>Basic commands and looping</h3>",
					   "<table class='commands'>",
					   "<tr><th>Command</th><th>Example</th><th>What it does</th></tr>",
					   "<tr><td>fd</td><td>fd 100</td><td>Move forward 100 units</td></tr>",
					   "<tr><td>rt</td><td>rt 90</td><td>Turn right 90 degrees</td></tr>",
					   "<tr><td>penup</td><td>penup</td><td>Lift the pen off the paper - no lines are<br/>drawn until you put it down again</td></tr>",
					   "<tr><td>pendown</td><td>pendown</td><td>Place the pen back down on the paper</td></tr>",
					   "<tr><td>color</td><td>color orange</td><td>Change the color of the pen</td></tr>",
					   "<tr><td>bg</td><td>bg black</td><td>Change the color of the background</td></tr>",
					   "<tr><td>thick</td><td>thick 8</td><td>Change the thickness of the lines<br/>(from 1 to 20)</td></tr>",
					   "<tr><td>rpt 10 [</br>...</br>]</td><td>rpt 10 [<br/>&nbsp;&nbsp;&nbsp;&nbsp;fd 100<br/>&nbsp;&nbsp;&nbsp;&nbsp;rt 36<br/>]</td><td>Repeat the commands inside<br/>the square brackets 10 times</td></tr>",
					   "</table>"
					   ]
		   },
		   {
		   "contents":[
					   "<h3>Functions and advanced commands</h3>",
					   "<table class='commands'>",
					   "<tr><th>Command</th><th>Example</th><th>What it does</th></tr>",
					   "<tr><td>make \"varname</td><td>make \"num 16</td><td>Set the variable 'num' to 16</td></tr>",
					   "<tr><td>:varname</td><td>fd :num</td><td>Use the variable 'num' (for<br/>example go forward 16 units)</td></tr>",
					   "<tr><td>to procname</br>...</br>end</td><td>to drawsquare<br/>&nbsp;&nbsp;&nbsp;&nbsp;rpt 4 [<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd 150<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rt 90<br/>&nbsp;&nbsp;&nbsp;&nbsp;]<br/>end<br/>drawsquare</td><td>Define a function called</br>'drawsquare', which takes no</br>input, and then call it</td></tr>",
					   "<tr><td>to procname :a :b :c</br>...</br>end</td><td>to drawpoly :len :n<br/>&nbsp;&nbsp;&nbsp;&nbsp;rpt :n [<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fd :len<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rt(360/:n)<br/>&nbsp;&nbsp;&nbsp;&nbsp;]<br/>end<br/>drawpoly 200 7</td><td>Define a function which takes a number<br/>of inputs, in this case 'len' and 'n',<br/>and then call it with inputs 200 and 7.</td></tr>",
					   "</table>"
					   ]
		   },
		   {
		   "contents":[
					  "<h3>Colors you can use</h3>",
					   "<table class='colors'>",
					   "<tr>",
					   "<td style='background:#c0392b;'>darkred/dkred/<br/>terracotta</td>",
					   "<td style='background:#e74c3c;'>red<br/></td>",
					   "<td style='background:#E77471;'>pink<br/></td>",
					   "</tr>",
					   "<tr>",
					   "<td style='background:#9b59b6;'>purple/violet<br/></td>",
					   "<td style='background:#653aa5;'>darkpurple/dkpurple/<br/>indigo</td>",
					   "<td style='background:#34495e;'>darkblue/dkblue/<br/>midnight</td>",
					   "</tr>",
					   "<tr>",
					   "<td style='background:#2f88ca;'>blue<br/>&nbsp;</td>",
					   "<td style='background:#82CAFF;color:#333;'>lightblue/ltblue<br/></td>",
					   "<td style='background:#1abc9c;'>turquoise/turq</td>",
					   "</tr>",
					   "<tr>",
					   "<td style='background:#16a085;'>dkturq/dkturquoise/<br/>darkturquoise</td>",
					   "<td style='background:#27ae60;'>darkgreen/dkgreen<br/></td>",
					   "<td style='background:#2ecc71;'>green<br/>&nbsp;</td>",
					   "</tr>",
					   "<tr>",
					   "<td style='background:#f1c40f;color:#333;'>yellow<br/></td>",
					   "<td style='background:#f39c12;'>ltorange/lightorg/<br/>ltorg/lightorange</td>",
					   "<td style='background:#e67e22;'>orange/org/<br/>carrot</td>",
					   "</tr>",
					   "<tr>",
					   "<td style='background:#d35400;'>dkorange/darkorg/<br/>darkorange/dkorg</td>",
					   "<td style='background:#dddddd;color:#333;'>white</td>",
					   "<td style='background:#bdc3c7;color:#333;'>lightgrey/ltgrey/<br/>lightgray/ltgray</td>",
					   "</tr>",
					   "<tr>",
					   "<td style='background:#95a5a6;color:#333;'>gray/grey</td>",
					   "<td style='background:#6f7c7d;'>darkgray/dkgray/<br/>darkgrey/dkgrey</td>",
					   "<td style='background:#000000;'>black</td>",
					   "</tr>",
					   "</table>"
					   ]
		   }
	],
	
	
	"examples":[
				{
				"file":"fd 100\nrt 90\nfd 100\nrt 90\nfd 100\nrt 90\nfd 100\nrt 90",
				"media":"help/images/eg1.png",
				"contents":[
							"<h3>Example 1</h3>",
							"<p>Learn the basics, moving the turtle forward and turning right on the spot.</p>",
							"<p></p>",
							"<pre>fd 100\nrt 90\nfd 100\nrt 90\nfd 100\nrt 90\nfd 100\nrt 90</pre>"
							]
				},
				{
				"file":"fd 50 penup\nfd 50 pendown\nfd 50 penup\nfd 50 pendown\nfd 50\nrt 120\nfd 50 penup\nfd 50 pendown\nfd 50 penup\nfd 50 pendown\nfd 50\nrt 120\nfd 50 penup\nfd 50 pendown\nfd 50 penup\nfd 50 pendown\nfd 50\nrt 120",
				"media":"help/images/eg2.png",
				"contents":[
							"<h3>Example 2</h3>",
							"<p>Learn how to use penup and pendown.</p>",
							"<p></p>",
							"<pre>fd 50 penup\nfd 50 pendown\nfd 50 penup\nfd 50 pendown\nfd 50\nrt 120\nfd 50 penup\nfd 50 pendown\nfd 50 penup\nfd 50 pendown\nfd 50\nrt 120\nfd 50 penup\nfd 50 pendown\nfd 50 penup\nfd 50 pendown\nfd 50\nrt 120</pre>"
							]
				},
				{
				"file":"bg dkgray\nthick 3\ncolor yellow\nfd 30 rt 50\nthick 7\ncolor blue\nfd 50 rt 50\nthick 11\ncolor orange\nfd 70 rt 50\nthick 15\ncolor red\nfd 90 rt 50\nthick 19\ncolor green\nfd 110 rt 50",
				"media":"help/images/eg3.png",
				"contents":[
							"<h3>Example 3</h3>",
							"<p>Learn how to use colours and pen thickness.</p>",
							"<p></p>",
							"<pre>bg dkgray\nthick 3\ncolor yellow\nfd 30 rt 50\nthick 7\ncolor blue\nfd 50 rt 50\nthick 11\ncolor orange\nfd 70 rt 50\nthick 15\ncolor red\nfd 90 rt 50\nthick 19\ncolor green\nfd 110 rt 50</pre>"
							]
				},
				{
				"file":"bg black\ncolor green\nrpt 36 [\nrpt 360 [\nfd 1\nrt 1\n]\nrt 10\n]",
				"media":"help/images/eg4.png",
				"contents":[
							"<h3>Example 4</h3>",
							"<p>Learn how you can use loops within loops to create attractive patterns.</p>",
							"<p></p>",
							"<pre>bg black\ncolor green\nrpt 36 [\nrpt 360 [\nfd 1\nrt 1\n]\nrt 10\n]</pre>"
							]
				},
				{
				"file":"bg pink\nthick 8\ncolor purple\nmake \"numsides 7\nrpt :numsides [\nfd 100\nrt 360/:numsides\n]",
				"media":"help/images/eg5.png",
				"contents":[
							"<h3>Example 5</h3>",
							"<p>Learn how to use a variable and a repeat loop to draw regular polygons.</p>",
							"<p></p>",
							"<pre>bg pink\nthick 8\ncolor purple\nmake \"numsides 7\nrpt :numsides [\n  fd 100\n  rt 360/:numsides\n]</pre>"
							]
				},
				{
				"file":"bg orange\ncolor white\nthick 5\nmake \"n 24\nmake \"s 300\nrpt :n [\n  fd :s\n  rt (180 - 360/:n)\n]",
				"media":"help/images/eg6.png",
				"contents":[
							"<h3>Example 6</h3>",
							"<p>Learn how to use a variable and a repeat loop to draw a star shape.</p>",
							"<p></p>",
							"<pre>bg orange\ncolor white\nthick 5\nmake \"n 24\nmake \"s 300\nrpt :n [\n  fd :s\n  rt (180 - 360/:n)\n]</pre>"
							]
				},
				{
				"file":"bg red\ncolor yellow\nthick 10\nmake \"n 4\nto drawsquare\n  rpt :n [\n    fd 100\n    rt 90\n  ]\nend\nrpt 8 [\n  drawsquare\n  rt 45\n]",
				"media":"help/images/eg7.png",
				"contents":[
							"<h3>Example 7</h3>",
							"<p>Learn how to use a variable, a procedure and repeat loops in combination.</p>",
							"<p></p>",
							"<pre>bg red\ncolor yellow\nthick 10\nmake \"n 4\nto drawsquare\n  rpt :n [\n    fd 100\n    rt 90\n  ]\nend\nrpt 8 [\n  drawsquare\n  rt 45\n]</pre>"
							]
				},
				{
				"file":"color black\nbg yellow\nmake \"a 5\nto drawpoly :side :n\n  rpt :n [\n    fd :side\n    rt(360/:n)\n  ]\nend\nrpt 10 [\n  drawpoly 25 :a\n  make \"a :a+4\n]",
				"media":"help/images/eg8.png",
				"contents":[
							"<h3>Example 8</h3>",
							"<p>Learn how to use a procedure with two input varaibles.</p>",
							"<p></p>",
							"<pre>color black\nbg yellow\nmake \"a 5\nto drawpoly :side :n\n  rpt :n [\n    fd :side\n    rt(360/:n)\n  ]\nend\nrpt 10 [\n  drawpoly 25 :a\n  make \"a :a+4\n]</pre>"
							]
				},
				{
				"file":"bg blue\ncolor white\nrpt 90 [\n  fd 1\n  rt 1\n]\nrt 270\nrpt 180 [\n  fd 1\n  rt 1\n]\nrt 270\nrpt 90 [\n  fd 1\n  rt 1 \n]",
				"media":"help/images/eg9.png",
				"contents":[
							"<h3>Example 9</h3>",
							"<p>Learn how large repeat loops with small steps can create curves.</p>",
							"<p></p>",
							"<pre>bg blue\ncolor white\nrpt 90 [\n  fd 1\n  rt 1\n]\nrt 270\nrpt 180 [\n  fd 1\n  rt 1\n]\nrt 270\nrpt 90 [\n  fd 1\n  rt 1 \n]</pre>"
							]
				},
				{
				"file":"bg white\ncolor red\nto drawspiral :dist\n  fd :dist\n  rt 90\n  drawspiral (:dist+5)\nend\n\ndrawspiral 10",
				"media":"help/images/eg10.png",
				"contents":[
							"<h3>Example 10</h3>",
							"<p>Learn how to use recursion - call a function from inside the same function.</p>",
							"<p></p>",
							"<pre>bg white\ncolor red\nto drawspiral :dist\n  fd :dist\n  rt 90\n  drawspiral (:dist+5)\nend\n\ndrawspiral 10</pre>"
							]
				},
				{
				"file":"bg white\ncolor midnight\nmake \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]",
				"media":"help/images/eg11.png",
				"contents":[
							"<h3>Example 11</h3>",
							"<p>Learn how to modify variables inside a repeat loop to create this spiral pattern.</p>",
							"<p></p>",
							"<pre>bg white\ncolor midnight\nmake \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]</pre>"
							]
				},
				{
				"file":"bg white\ncolor terracotta\nto drawtri :l\nrpt 3 [\nfd :l\nrt 120 ]\nend\n\nmake \"l 200\nrpt 200 [\ndrawtri :l\nrt 10\nmake \"l :l - 1\n]",
				"media":"help/images/eg12.png",
				"contents":[
							"<h3>Example 12</h3>",
							"<p>Combine functions and repeat loops to create attractive patterns.</p>",
							"<p></p>",
							"<pre>bg white\ncolor terracotta\nto drawtri :l\nrpt 3 [\nfd :l\nrt 120 ]\nend\n\nmake \"l 200\nrpt 200 [\ndrawtri :l\nrt 10\nmake \"l :l - 1\n]</pre>"
							]
				},
				{
				"file":"bg indigo\nthick 10\nmake \"j 50\nmake \"i 50\nto fn\nmake \"i 100\nfd :i\ncolor blue\nfd :j\nend\nfn\ncolor green\nfd :i",
				"media":"help/images/eg13.png",
				"contents":[
							"<h3>Example 13</h3>",
							"<p>Study this program to understand variable scope in Logo.</p>",
							"<p>There are two variables called 'i', one has global scope and one is defined inside the function and it has scope inside that function only.</p>",
							"<p>When 'i' is re-defined as 100 that only impacts the 'i' inside the function, and so the last line draws fd 50 in green, not fd 100.</p>",
							"<pre>bg indigo\nthick 10\nmake \"j 50\nmake \"i 50\nto fn\n  make \"i 100\n  fd :i\n  color blue\n  fd :j\nend\nfn\ncolor green\nfd :i</pre>"
							]
				}
				],
	"help":[
			{
			"top":
					[
					"<h3>Welcome to Logotacular!</h3>",
					 "<p>Logotacular is an application for drawing colourful patterns using a programming language called 'Logo'.</p>",
					 "<p>Logo was designed to help you explore geometry and programming, by controlling an on-screen imaginary 'turtle' that draws lines as it moves.</p>"
					 ],
			"file":"bg purple\ncolor white\nthick 20\nrt -30\nto star :len\nrpt 6 [\nfd :len\nrt -60\nfd :len\n rt 120\n]\nend\nstar 100\nrt 30\npenup fd 70 pendown\nrt -30\nstar 60",
			"media":"help/images/help0.png",
			"popup":"help/video/help0.mp4",
			"contents":[
						"<p>Learn about</p>",
						"<ul><li>Logical reasoning</li><li>Algorithms</li><li>Testing and debugging</li><li>Use of variables</li><li>Use of functions</li><li>Repeating - using loops</li><li>Recursion</li><li>Variable scope</li><li>Lengths and angles</li><li>Interior and exterior angles</li><li>Regular polygons</li><li>Circles and curve-based shapes</li></ul>"
						]
			},
			{
			"top":
					[
					 "<h3>How to write a program</h3>",
					 "<p>In Logo we imagine a turtle that starts at the centre and is controlled by commands. As it moves around the screen it leaves a trail showing you where it has moved to.</p>",
					 "<p>The most basic commands in Logo are 'go forward' and 'turn right'.  For example <span class='mono'>'fd 100'</span> tells the turtle to go forward 100 units (in whatever direction it is facing),  and <span class='mono'>'rt 90'</span> tells it turn 90 degrees clockwise.</p>"
					 ],
			"file":"fd 100\nrt 90\nfd 100\nrt 90\nfd 100\nrt 90\nfd 100\nrt 90",
			"media":"help/images/help1.png",
			"popup":"help/video/help1.mp4",
			"contents":[
						"<p>Try drawing a square using:</p>",
						"<pre>fd 100\nrt 90\nfd 100\nrt 90\nfd 100\nrt 90\nfd 100\nrt 90</pre>",
						"<p></p>",
						"<p>You don't have to put each command on a new line, but it can make it easier to read!</p>"
						]
			},
			{
			"top":
					[
					"<h3>Drawing with colors</h3>",
					 "<p>You can change the color of the lines, as well as the background color of the page by using the '<span class='mono'>color</span>' and '<span class='mono'>bg</span>' commands:</p>",
					 "<pre>bg yellow\ncolor dkgreen</pre>"
					 ],
			"file":"bg yellow\ncolor dkgreen\nthick 12 \nfd 30 penup\nfd 30 pendown\nfd 30 penup\nfd 30 pendown\nfd 30 penup\nfd 30 pendown\nfd 30 penup\nfd 30 pendown\nfd 30",
			"media":"help/images/help2.png",
			"popup":"help/video/help2.mp4",
			"contents":[
						"<p>You can change the thickness of the lines drawn (from 1 to 20), and raise or lower the pen. Lifting the pen will stop lines being drawn until you place it down again.</p>",
						"<pre>thick 12 \nfd 30 penup\nfd 30 pendown\nfd 30 penup\nfd 30 pendown\nfd 30 penup\nfd 30 pendown\nfd 30 penup\nfd 30 pendown\nfd 30</pre>"
						]
			},
			{
			"top":[
					"<h3>Using variables</h3>",
					 "<p>Variables let you define a number so you can use it in a lot of places later. Not only do they let you re-use numbers, but later on you only have to change them one place if you need to!</p>",
					 "<p>Use the '<span class='mono'>make</span>' command to set the value of a variable - for example set the variable 'side' equal to 200 like this:</p>",
					 "<pre>make \"side 200</pre>"
					 ],
			"file":"make \"side 200\nfd :side",
			"media":"help/images/help3.png",
			"popup":"help/video/help3.mp4",
			"contents":[
						"<p>Notice that you must put a \" symbol in front when you set a variable. </p>",
						"<p>To use the variable, put a colon ( : ) in front like this:</p>",
						"<pre>fd :side</pre>",
						"<p></p>",
						"<p>This is the same as writing '<span class='mono'>fd 200</span>', but it is easier to change the 200 to something else if you give it a name.</p>",
						"<p>Remember to use \" when you're setting a variable and : when you want to use it.</p>"
						]
			},
			{
			"top":
					[
					 "<h3>Doing arithmetic</h3>",
					 "<p>You can do normal arithmetic using numbers or variables.</p>",
					 "<p>Like most computer programs, you must write '<span class='mono'>*</span>' for multiply (or times) and '<span class='mono'>/</span>' for divide.</p>",
					 "<p>You can use '<span class='mono'>+</span>' and '<span class='mono'>-</span>' and round brackets '<span class='mono'>( )</span>' like you normally would.</p>"
					 ],
			"file":"make \"h 30\nmake \"w 3*:h\nfd :w - 2*:h rt 90\nfd :w - :h rt 90\nfd :w rt 90 \nfd :w + :h  rt 90 \nfd :w + 2*:h rt 90",
			"media":"help/images/help4.png",
			"popup":"help/video/help4.mp4",
			"contents":[
						"<p>For example:</p>",
						"<pre>make \"h 30\nmake \"w 3*:h\nfd :w - 2*:h rt 90\nfd :w - :h rt 90\nfd :w rt 90 \nfd :w + :h  rt 90 \nfd :w + 2*:h rt 90</pre>"
						]
			},
			{
			"top":
					[
					"<h3>Loops</h3>",
					 "<p>Loops can be programmed by use of the <span class='mono'>'rpt'</span> (repeat) command which tells the turtle to execute the commands inside the square brackets a specific number of times.</p>",
					 "<pre>rpt 10 [ put your commands here and they will be executed 10 times! ]</pre>"
					 ],
			"file":"bg blue\nmake \"a 72\nmake \"n 5\nrpt :n [\nfd 100 rt :a\n]",
			"media":"help/images/help5.png",
			"popup":"help/video/help5.mp4",
			"contents":[
						"<p>We could draw a square like this:</p>",
						"<pre>rpt 4 [ fd 100 rt 90 ]</pre>",
						"<p></p>",
						"<p>You must start a repeat block with '<span class='mono'>[</span>' and you must end it with '<span class='mono'>]</span>'.</p>",
						"<p>Can you work out what the following code will draw?</p>",
						"<pre>make \"a 72\nmake \"n 5\nrpt :n [fd 100 rt :a]</pre>"
						]
			},
			{
			"top":
					[
					"<h3>Procedures and functions</h3>",
					 "<p>We know that the turtle knows the words '<span class='mono'>make</span>', '<span class='mono'>penup</span>', '<span class='mono'>color</span>' etc. A function or procedure is often thought of as telling the turtle the meaning of a new word, for example we could draw a square by defining a procedure called 'drawsquare' and then 'calling' that procedure.</p>",
					 "<p>You use the '<span class='mono'>to</span>' keyword to define a procedure, and '<span class='mono'>end</span>' to mark the end:</p>"
					 ],
			"file":"bg red\nto drawsquare\n  rpt 4 [\n    fd 100 \n    rt 90\n  ]\nend\n\ndrawsquare",
			"media":"help/images/help6.png",
			"popup":"help/video/help6.mp4",
			"contents":[
						"<pre>to drawsquare\n  rpt 4 [\n    fd 100 \n    rt 90\n  ]\nend\n\ndrawsquare</pre>",
						"<p></p>",
						"<p>The first 6 lines define the procedure and the last line 'calls' or 'executes' the function. The spaces at the start of the lines are optional but can make it easier to read.</p>"
						]
			},
			{
			"top":
				[
					"<h3>Procedures and functions continued</h3>",
					 "<p>Functions can optionally take some variables as input.  For example, you might want to re-use a block of commands more than once, with different lengths or angles each time.</p>",
					 "<p>List the variables one by one after the name of the function as shown:</p>",
					 "<pre>to drawpoly :len :n</pre>"
					 ],
			"file":"bg midnight\nto drawpoly :len :n\n  rpt :n [\n    fd :len \n    rt (360/:n)\n  ]\nend\ndrawpoly 200 4\ndrawpoly 83 8",
			"media":"help/images/help7.png",
			"popup":"help/video/help7.mp4",
			"contents":[
						"<pre>to drawpoly :len :n\n  rpt :n [\n    fd :len \n    rt (360/:n)\n  ]\nend\ndrawpoly 200 4\ndrawpoly 83 8</pre>",
						"<p></p>",
						"<p>The procedure above has two arguments, called 'len' and 'n', and it is then called first with 'len' equal to 200 and 'n' equal to 4, and then with 'len' equal to 83 and 'n' equal to 8.</p>"
						]
			},
			{
			"top":[
					"<h3>Recursion</h3>",
					 "<p>Recursion happens when, inside a function, you call the same function, normally with different input.</p>",
					 "<p>For example the program below defines a procedure which accepts one variable called 'dist' and repeatedly calls itself, increasing the value of 'dist' by 5 each time:</p>"
					 ],
			"file":"bg white\ncolor red\nto drawspiral :dist\n  fd :dist\n  rt 90\n  drawspiral (:dist+5)\nend\n\ndrawspiral 10",
			"media":"help/images/help8.png",
			"popup":"help/video/help8.mp4",
			"contents":[
						"<pre>to drawspiral :dist\n  fd :dist\n  rt 90\n  drawspiral (:dist+5)\nend\n\ndrawspiral 10</pre>",
						"<p></p>",
						"<p>The result is an increasing series of line segments, with lengths 10, 15, 20, 25... etc - forming a spiral.</p>",
						"<p>Eventually the program will crash because it calls itself too many times!</p>"
						]
			},
			{
			"top":
			[
			 "<h3>Variable scope</h3>",
			 "<p>The program below illustrates the concept of 'scope' in Logotacular.</p>",
			 "<p>Every variable exists in a 'scope' depending on where you defined it, so you can have two variables with the same name that exist in different 'scopes'.</p>",
			 "<p>First look at the following lines from the program:</p>"
			 ],
			"file":"bg indigo\nthick 10\nmake \"j 50\nmake \"i 50\nto fn\nmake \"i 100\nfd :i\ncolor blue\nfd :j\nend\nfn\ncolor green\nfd :i",
			"media":"help/images/help9.png",
			"popup":"help/video/help9.mp4",
			"contents":[
						"<pre>make \"j 50\nto fn\n  fd :j\nend\nfn</pre>",
						"<p></p>",
						"<p>A variable called 'j' is set to 50 outside of the function. When called, the function will check if a variable called 'j' has been defined again inside the function itself.</p>",
						"<p>In this case it hasn't, so the function uses the variable 'j' from outside. We can say that 'j' has 'global scope' because any code can use it.</p>"
						]
			},
			{
			"top":
			[
			 "<h3>Variable scope continued</h3>",
			 "<p>You can also define variables inside functions, and then they will exist inside that function only:</p>",
			 "<pre>make \"i 50\nto fn make \"i 100 fd :i end\nfn\nfd :i</pre>",
			 ],
			"file":"bg indigo\nthick 10\nmake \"j 50\nmake \"i 50\nto fn\nmake \"i 100\nfd :i\ncolor blue\nfd :j\nend\nfn\ncolor green\nfd :i",
			"media":"help/images/help10.png",
			"popup":"help/video/help10.mp4",
			"contents":[

						"<p>A variable called 'i' is set to 50 outside the function. But when the function is called it immediately sets another variable called 'i' to 100, and goes forward 100 units.</p>",
						"<p>On the last line we go forward 'i' units again, but this time it will go forward 50 units.</p>",
						"<p>This is because there are actually two different variables called 'i', with different scope, and the one that equals 100 only exists temporarily, only inside the function.</p>"
						]
			},
			{
			"top":
				[
					"<h3>Errors and debugging</h3>",
					 "<p>Errors are of two kinds: they can be in your code itself or they might only happen when you run your code.</p>",
					 "<p>The first kind of errors include those such as missing out a bracket or forgetting to put '<span class='mono'>end</span>' at the end of a function definition.  The second kind of errors don't appear until you press 'Play'.  For example, you might try to use a variable or call a function that you haven't defined, or you might divide by zero by mistake.</p>"
					 ],
			"file":"rpt 10 [ fd 10\nmake \"a 0\nfd :b/:a",
			"media":"help/images/help11.png",
			"popup":"help/video/help11.mp4",
			"contents":[
						"<p>This program has an error of the first kind:</p>",
						"<pre>rpt 10 [fd 10</pre>",
						"<p></p>",
						"<p>The program below has two errors of the second kind.  Firstly 'b' is not defined, and secondly you cannot divide by 'a' since it is zero.</p>",
						"<pre>make \"a 0\nfd :b/:a</pre>",
						"<p></p>",
						"<p>In Logotacular an arrow appears where it thinks the error is - you can click on it for more information.</p>"
						]
			},
			{
			"top":
					[
					 "<h3>History of Logo</h3>",
					 "<p>Logo was created in 1967 by Wally Feurzeig and Seymour Papert - researchers at MIT. Their goal was to create an easy to learn application where kids could play with words and the structure of sentences. Later versions of Logo included on screen graphics and the forward and right commands to move an on-screen 'turtle' around the screen, and it became known as Turtle graphics. In 1969, a physical robot was designed which would move across the floor tracing its path with a pen.</p>",
					 "<p>Seymour Papert pioneered its use in school classrooms as an educational system in the early 1970's, saying:</p>"
					 ],
			"file":"bg black\ncolor green\nrpt 36 [\nrpt 360 [\nfd 1\nrt 1\n]\nrt 10\n]",
			"media":"help/images/help12.png",
			"popup":"help/video/help12.mp4",
			"contents":[
						"<p class='quote'>\"In many schools today, the phrase 'Computer-Aided Instruction' means making the computer teach the child... In my vision the child programs the computer and, in so doing, both acquires a sense of mastery over a piece of the most modern and powerful technology and establishes an intimate contact with some of the deepest ideas from science, from mathematics, and from the art of intellectual model building...\"</p>",
						"<p class='quote'>\"...Traditional education codifies what it thinks citizens need to know and sets out to feed children this 'fish'. Constructionism is built on the assumption that children will do best by finding ('fishing') for themselves... the Turtle is like a person: 'I am here and I am facing north...' And from these similarities comes the Turtle's special ability to serve as a representative of formal mathematics\"</p>"
						]
			},
			{
			"top":
					[
					 "<h3>Privacy policy etc</h3>",
					 "<ul>",
					 "<li>Logotacular has no form of log-in and collects no personal information from any users.</li>",
					 "<li>It does not connect to any external services or servers.</li>",
					 "<li>All data (your Logo files) are saved locally on your device.</li>",
					 "<li>Logotacular contains no external links to any websites or similar.</li>",
					 "<li>If at any time the app is updated to include features that require log in you will be provided notice and asked to choose whether to update or not.</li>",
					 "</ul>"
					 ],
			"file":"bg white\ncolor terracotta\nto drawtri :l\nrpt 3 [\nfd :l\nrt 120 ]\nend\n\nmake \"l 200\nrpt 200 [\ndrawtri :l\nrt 10\nmake \"l :l - 1\n]",
			"media":"help/images/help13.png",
			"popup":"help/video/help13.mp4",
			"contents":[
						"<p>For suggestions, improvements, to report bugs or to let me know how you used the app in the classroom or as a student, do drop me a message at john.grindall@gmail.com</p>"
						]
			}
   ]
}