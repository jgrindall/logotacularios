{
	"examples":[
				{
				"header":"Example 1",
				"file":"fd 100\nrt 90\nfd 100\nrt 90\nfd 100\nrt 90\nfd 100\nrt 90",
				"media":"help/eg1.png",
				"contents":[
							"<p>Learn the basics, moving the turtle forward and turning right on the spot.</p>",
							"<p></p>",
							"<pre style='font-size:20px;'>fd 100\nrt 90\nfd 100\nrt 90\nfd 100\nrt 90\nfd 100\nrt 90</pre>"
							]
				},
				{
				"header":"Example 2",
				"file":"fd 50 penup\nfd 50 pendown\nfd 50 penup\nfd 50 pendown\nfd 50\nrt 120\nfd 50 penup\nfd 50 pendown\nfd 50 penup\nfd 50 pendown\nfd 50\nrt 120\nfd 50 penup\nfd 50 pendown\nfd 50 penup\nfd 50 pendown\nfd 50\nrt 120",
				"media":"help/eg2.png",
				"contents":[
							"<p>Learn how to use penup and pendown.</p>",
							"<p></p>",
							"<pre style='font-size:20px;'>fd 50 penup\nfd 50 pendown\nfd 50 penup\nfd 50 pendown\nfd 50\nrt 120\nfd 50 penup\nfd 50 pendown\nfd 50 penup\nfd 50 pendown\nfd 50\nrt 120\nfd 50 penup\nfd 50 pendown\nfd 50 penup\nfd 50 pendown\nfd 50\nrt 120</pre>"
							]
				},
				{
				"header":"Example 3",
				"file":"bg dkgray\nthick 3\ncolor yellow\nfd 30 rt 50\nthick 7\ncolor blue\nfd 50 rt 50\nthick 11\ncolor orange\nfd 70 rt 50\nthick 15\ncolor red\nfd 90 rt 50\nthick 19\ncolor green\nfd 110 rt 50",
				"media":"help/eg3.png",
				"contents":[
							"<p>Learn how to use colours and pen thickness.</p>",
							"<p></p>",
							"<pre style='font-size:20px;'>bg dkgray\nthick 3\ncolor yellow\nfd 30 rt 50\nthick 7\ncolor blue\nfd 50 rt 50\nthick 11\ncolor orange\nfd 70 rt 50\nthick 15\ncolor red\nfd 90 rt 50\nthick 19\ncolor green\nfd 110 rt 50</pre>"
							]
				},
				{
				"header":"Example 4",
				"file":"bg orange\ncolor white\nthick 5\nmake \"n 24\nmake \"s 300\nrpt :n [\n  fd :s\n  rt (180 - 360/:n)\n]",
				"media":"help/eg4.png",
				"contents":[
							"<p>Learn how to use a variable and a repeat loop to draw a star shape.</p>",
							"<p></p>",
							"<pre style='font-size:20px;'>bg orange\ncolor white\nthick 5\nmake \"n 24\nmake \"s 300\nrpt :n [\n  fd :s\n  rt (180 - 360/:n)\n]</pre>"
							]
				},
				{
				"header":"Example 5",
				"file":"bg red\ncolor yellow\nthick 10\nmake \"n 4\nto drawsquare\n  rpt :n [\n    fd 100\n    rt 90\n  ]\nend\nrpt 8 [\n  drawsquare\n  rt 45\n]",
				"media":"help/eg5.png",
				"contents":[
							"<p>Learn how to use a variable, a procedure and repeat loops in combination.</p>",
							"<p></p>",
							"<pre style='font-size:20px;'>bg red\ncolor yellow\nthick 10\nmake \"n 4\nto drawsquare\n  rpt :n [\n    fd 100\n    rt 90\n  ]\nend\nrpt 8 [\n  drawsquare\n  rt 45\n]</pre>"
							]
				},
				{
				"header":"Example 6",
				"file":"color black\nbg yellow\nmake \"a 5\nto drawpoly :side :n\n  rpt :n [\n    fd :side\n    rt(360/:n)\n  ]\nend\nrpt 10 [\n  drawpoly 25 :a\n  make \"a :a+4\n]",
				"media":"help/eg6.png",
				"contents":[
							"<p>Learn how to use a procedure with two input varaibles</p>",
							"<p></p>",
							"<pre style='font-size:20px;'>color black\nbg yellow\nmake \"a 5\nto drawpoly :side :n\n  rpt :n [\n    fd :side\n    rt(360/:n)\n  ]\nend\nrpt 10 [\n  drawpoly 25 :a\n  make \"a :a+4\n]</pre>"
							]
				},
				{
				"header":"Example 7",
				"file":"bg blue\ncolor white\nrpt 90 [\n  fd 1\n  rt 1\n]\nrt 270\nrpt 180 [\n  fd 1\n  rt 1\n]\nrt 270\nrpt 90 [\n  fd 1\n  rt 1 \n]",
				"media":"help/eg7.png",
				"contents":[
							"<p>Learn how to use large repeat loops and small steps to create curve-like patterns.</p>",
							"<p></p>",
							"<pre style='font-size:20px;'>bg blue\ncolor white\nrpt 90 [\n  fd 1\n  rt 1\n]\nrt 270\nrpt 180 [\n  fd 1\n  rt 1\n]\nrt 270\nrpt 90 [\n  fd 1\n  rt 1 \n]</pre>"
							]
				},
				{
				"header":"Example 8",
				"file":"bg white\ncolor midnight\nmake \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]",
				"media":"help/eg8.png",
				"contents":[
							"<p>Learn how to modify variables inside a repeat loop.</p>",
							"<p></p>",
							"<pre style='font-size:20px;'>bg white\ncolor midnight\nmake \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]</pre>"
							]
				}
				],
	"help":[
			{
			"header":"Welcome to Logotacular!",
			"title":[
					 "<p>Logotacular is an application for drawing colourful patterns using a programming language called 'Logo'.</p>",
					 "<p>Logo was designed to help you explore geometry and programming, by controlling an on-screen imaginary 'turtle' that draws lines as it moves.</p>"
					 ],
			"file":"make \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]",
			"media":"help/help0.png",
			"popup":"help/help0.mov",
			"contents":[
						"<p>Learn about</p>",
						"<p><ul><li>Logical reasoning</li><li>Algorithms</li><li>Testing and debugging</li><li>Use of variables</li><li>Use of functions</li><li>Repeating - using loops</li><li>Recursion</li><li>Lengths and angles</li><li>Interior and exterior angles</li><li>Regular polygons</li><li>Circles and curve-based shapes</li></ul></p>"
						]
			},
			{
			"header":"How to write a program",
			"title":[
					 "<p>In Logo we imagine a turtle that starts at the centre and is controlled by commands. As it moves around the screen it leaves a trail showing you where it has moved to.</p>",
					 "<p>The most basic commands in Logo are 'go forward' and 'turn right'.</p>",
					 "<p>For example <span class='mono'>'fd 100'</span> tells the turtle to go forward 100 units (in whatever direction it is facing), and <span class='mono'>'rt 90'</span> tells it turn 90 degrees clockwise.</p>"
					 ],
			"file":"make \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]",
			"media":"help/help0.png",
			"popup":"help/help0.mov",
			"contents":[
						"<p>Try drawing a square using:</p>",
						"<pre style='font-size:20px;'>fd 100\nrt 90\nfd 100\nrt 90\nfd 100\nrt 90\nfd 100\nrt 90</pre>",
						"<p></p>",
						"<p>You don't have to put each command on a new line, but it can make it easier to read!</p>"
						]
			},
			{
			"header":"Drawing with colors",
			"title":[
					 "<p>You can change the color of the lines, as well as the background color of the page by using the 'color' and 'bg' commands:</p>",
					 "<pre style='font-size:20px;'>bg red\ncolor green</pre>"
					 ],
			"file":"make \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]",
			"media":"help/help0.png",
			"popup":"help/help0.mov",
			"contents":[
						"<p>You can change the thickness of the lines drawn (from 1 to 20), and raise or lower the pen. Lifting the pen will stop lines being drawn until you place it down again.</p>",
						"<pre style='font-size:20px;'>thick 7 \nfd 50 \npenup\nfd 50\npendown\nfd 50\npenup\nfd 50 \npendown\nfd 50</pre>"
						]
			},
			{
			"header":"Using variables",
			"title":[
					 "<p>Variables let you define a number so you can use it in a lot of places later. Not only do they let you re-use numbers, but later on you only have to change them one place if you need to!</p>",
					 "<p>Use the '<span class='mono'>make</span>' command to set the value of a variable.</p>",
					 "<pre style='font-size:20px;'>make \"side 200</pre>"
					 ],
			"file":"make \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]",
			"media":"help/help0.png",
			"popup":"help/help0.mov",
			"contents":[
						"<p>Notice that you must put a \" symbol in front when you set a variable. </p>",
						"<p>To use the variable, put a : in front:</p>",
						"<pre style='font-size:20px;'>fd :side</pre>",
						"<p></p>",
						"<p>This is the same as writing <span class='mono'>fd 200</span>, but it is easier to change the 200 to something else if you give it a name.</p>",
						"<p>Remember to use \" when you're setting a variable and : when you want to use it.</p>"
						]
			},
			{
			"header":"Doing arithmetic",
			"title":[
					 "<p>You can do normal arithmetic using numbers or variables.</p>",
					 "<p>Like most computer programs, you must write '<span class='mono'>*</span>' for multiply (or times) and '<span class='mono'>/</span>' for divide.</p>",
					 "<p>You can use '<span class='mono'>+</span>' and '<span class='mono'>-</span>' and round brackets '<span class='mono'>( )</span>' like you normally would.</p>"
					 ],
			"file":"make \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]",
			"media":"help/help0.png",
			"popup":"help/help0.mov",
			"contents":[
						"<p>For example:</p>",
						"<pre style='font-size:20px;'>make \"w 100\nmake \"h 30\nfd :w - 2*:h rt 90\nfd :w - :h rt 90\nfd :w rt 90 \nfd :w + :h  rt 90 \nfd :w + 2*:h rt 90</pre>"
						]
			},
			{
			"header":"Loops",
			"title":[
					 "<p>Loops can be programmed by use of the <span class='mono'>'rpt'</span> (repeat) command which tells the turtle to execute the commands inside the square brackets a specific number of times.</p>",
					 "<pre style='font-size:20px;'>rpt 10 [ put your commands here and they will be executed 10 times! ]</pre>"
					 ],
			"file":"make \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]",
			"media":"help/help0.png",
			"popup":"help/help0.mov",
			"contents":[
						"<p>We could draw a square like this:</p>",
						"<pre style='font-size:20px;'>rpt 4 [ fd 100 rt 90]</pre>",
						"<p></p>",
						"<p>You must start a repeat block with '<span class='mono'>[</span>' and you must end it with '<span class='mono'>]</span>'.</p>",
						"<p>Can you work out what the following code will draw?</p>",
						"<pre style='font-size:20px;'>make \"a 72\nmake \"n 5\nrpt :n [fd 100 rt :a]</pre>"
						]
			},
			{
			"header":"Procedures and functions",
			"title":[
					 "<p>A function or procedure is often thought of as telling the turtle the meaning of a new word, for example we could draw a square by defining a procedure called 'drawsquare' and then 'calling' that procedure.</p>",
					 "<p>You use the 'to' keyword to define a procedure, and 'end' to mark the end:</p>"
					 ],
			"file":"make \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]",
			"media":"help/help0.png",
			"popup":"help/help0.mov",
			"contents":[
						"<pre style='font-size:20px;'>to drawsquare\n  rpt 4 [\n  fd 100 \n  rt 90\n]\nend\n\ndrawsquare</pre>",
						"<p></p>",
						"<p>The first 6 lines define the procedure and the last line 'calls' or 'executes' the function.</p>"
						]
			},
			{
			"header":"Procedures and functions continued",
			"title":[
					 "<p>Functions can optionally take some variables as input. For example, you might want to re-use a block of commands more than once, with different lengths or angles each time.</p>",
					 "<p>List the variables one by one after the name of the function as shown below like this:</p>",
					 "<pre style='font-size:20px;'>to drawpoly :len :num</pre>"
					 ],
			"file":"make \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]",
			"media":"help/help0.png",
			"popup":"help/help0.mov",
			"contents":[
						"<pre style='font-size:20px;'>to drawpoly :len :num\n  rpt :num [\n    fd :len \n    rt (360/:num)\n  ]\nend\ndrawpoly 100 5\ndrawpoly 80 7</pre>",
						"<p></p>",
						"<p>The procedure above has two arguments, called len and num, and it is then called first with len equal to 100 and num equal to 5, and then with len equal to 80 and num equal to 7.</p>"
						]
			},
			{
			"header":"Recursion",
			"title":[
					 "<p>Recursion happens in Logo when inside a function you call the same function, normally with different input.</p>",
					 "<p>For example the program below defines a procedure which accepts one variable called 'dist' and repeatedly calls itself, increasing the value of 'dist' each time:</p>"
					 ],
			"contents":[
						"<pre style='font-size:20px;'>to drawspiral :dist\n  fd :dist\n  rt 90\n  drawspiral (:dist+5)\nend\n\ndrawSpiral 10</pre>",
						"<p></p>",
						"<p>The result is an increasing series of line segments, forming a spiral.</p>",
						"<p>Eventually the program will crash because it calls itself too many times!</p>"
						]
			},
			{
			"header":"How to use Logotacular",
			"title":[
					 "<p>Write your Logo program in the panel on the right-hand-side.</p>",
					 "<p>Click 'play' to draw your commands on the screen, and click 'stop' to pause it if you see a mistake.</p>",
					 "<p>Your files can be saved and loaded and you can choose your filenames.</p>"
					 ],
			"file":"make \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]",
			"media":"help/help0.png",
			"popup":"help/help0.mov",
			"contents":[
						"<p>Create a new file</p>",
						"<p>See the examples, open and play with them</p>",
						"<p>Use the clear button to reset your Logo to blank</p>",
						"<p>Choose a filename</p>",
						"<p>Use the play/stop buttons</p>",
						"<p>Enlarge, zoom</p>",
						"<p>Reset zoom</p>",
						"<p>Save as</p>"
						]
			},
			{
			"header":"Errors and debugging",
			"title":[
					 "<p>Errors are of two kinds: they can be in your code itself or they might only happen when you run your code.</p>",
					 "<p>The first kind of errors include errors such as missing out a bracket or forgetting to put 'end' at the end of a function definition. The second kind of errors don't appear until you press 'Play'. For example, you might try to use a variable or call a function that you haven't defined, or you might divide by zero by mistake.</p>"
					 ],
			"file":"make \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]",
			"media":"help/help0.png",
			"popup":"help/help0.mov",
			"contents":[
						"<p>This program has an error of the first kind:</p>",
						"<pre style='font-size:20px;'>rpt 10 [fd 10</pre>",
						"<p></p>",
						"<p>The program below has two errors of the second kind - 'b' is not defined, and you cannot divide by 'a' when it is zero.</p>",
						"<pre style='font-size:20px;'>make \"a 0\nfd :b/:a</pre>",
						"<p></p>",
						"<p>In Logotacular an arrow appears next to the line where it thinks the error is. You can click on it for more information.</p>"
						]
			},
			{
			"header":"History of Logo",
			"title":[
					 "<p>Logo was created in 1967 by Wally Feurzeig and Seymour Papert - researchers at MIT. Their goal was to create an easy to learn application where kids could play with words and the structure of sentences. Later versions of Logo included on screen graphics and the forward and right commands to move an on-screen 'turtle' around the screen, and it became known as Turtle graphics. In 1969, a physical robot was designed which would move across the floor tracing its path with a pen.</p>",
					 "<p>Seymour Papert pioneered its use in school classrooms as an educational system in the early 1970's, saying:</p>"
					 ],
			"file":"make \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]",
			"media":"help/help0.png",
			"popup":"help/help0.mov",
			"contents":[
						"<p class='quote'>\"In many schools today, the phrase 'Computer-Aided Instruction' means making the computer teach the child... In my vision the child programs the computer and, in so doing, both acquires a sense of mastery over a piece of the most modern and powerful technology and establishes an intimate contact with some of the deepest ideas from science, from mathematics, and from the art of intellectual model building...\"</p>",
						"<p class='quote'>\"...Traditional education codifies what it thinks citizens need to know and sets out to feed children this 'fish'. Constructionism is built on the assumption that children will do best by finding ('fishing') for themselves... the Turtle is like a person: 'I am here and I am facing north...' And from these similarities comes the Turtle's special ability to serve as a representative of formal mathematics\"</p>"
						]
			},
			{
			"header":"Privacy policy",
			"title":[
					 "<p>Title0.....</p>"
					 ],
			"file":"make \"a 10\nrpt 300 [\n  fd 25\n  rt :a\n  make \"a :a*1.01\n]",
			"media":"help/help0.png",
			"popup":"help/help0.mov",
			"contents":[
						"<p>Logotacular contains Facebook log in if you wish to save or load your files.</p>"
						]
			}
   ]
}